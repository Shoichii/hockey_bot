import re
from datetime import datetime, timedelta
from typing import List

from aiogram import types
from aiogram.dispatcher import FSMContext

from bot import django_crud as dj
from bot.config import ADM_ID
from bot.dialogue_utils import (send_dialogue_message,
                                send_dialogue_message_with_media)
from bot.loader import dp, bot
from bot.states import Adm_State, Dialogue_State, StartState, CahngeProfileState
from bot.utils import user_notification


async def main_menu_message(msg):
    message = '''<b>–î–æ–±—Ä–æ–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–ö "–ö–∞—Ç—é—à–∞"!</b>

–ï—Å–ª–∏ –í—ã —É–∂–µ –ø–æ—Å–µ—â–∞–ª–∏ –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ - <b>"–í–æ–π—Ç–∏"</b>.
–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–±–µ—Ä–∏—Ç–µ - <b>"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"</b>
'''
    sign_in_button = types.InlineKeyboardButton('–í–æ–π—Ç–∏', callback_data='sign_in_button')
    sign_up_button = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='sign_up_button')
    keyboard = types.InlineKeyboardMarkup().row(sign_in_button, sign_up_button)
    await msg.answer(message, reply_markup=keyboard)

#–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    if msg.from_user.id == ADM_ID:
        button_1 = types.KeyboardButton('–£–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å üèí')
        button_2 = types.KeyboardButton('–û—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üìä')
        button_3 = types.KeyboardButton('–†—É–ø–æ—Ä üì¢')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row(button_3)
        keyboard.row(button_2, button_1)
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–¥–º–∏–Ω-–º–æ–¥ –≤–∫–ª—é—á–µ–Ω.', reply_markup=keyboard)
    else:
        tg_id = await dj.check_new_user(msg.from_user.id)
        if not tg_id:
            await main_menu_message(msg)

@dp.message_handler(commands=['schedule'])
async def show_shedule(msg: types.Message):
    trainings_data = await dj.get_shedule()
    message = '''
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:


'''
    for data in trainings_data:
        day = data.get('day')
        time = data.get('time')
        place = data.get('place')
        address = data.get('address')
        message += f'<b>{day} {time} - {place} | {address}</b>\n'
    
    await msg.answer(message)

#–¥–∏–∞–ª–æ–≥ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
@dp.message_handler(commands=['dialogue'])
async def start_dialogue(msg: types.Message):
    if msg.from_user.id == ADM_ID:
        await msg.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º.')
        return
    message = '''
–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –≤–∫–ª—é—á—ë–Ω.
–í—Å—ë, —á—Ç–æ –í—ã –Ω–∞–ø–∏—à–∏—Ç–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä—É –•–ö "–ö–∞—Ç—é—à–∞".
–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /stop_dialogue.
'''
    await msg.answer(message)
    await Dialogue_State.start.set()

@dp.message_handler(commands=['stop_dialogue'], state=Dialogue_State.start)
async def cancel_dialogue(msg: types.Message, state: FSMContext):
    if msg.from_user.id == ADM_ID:
        await msg.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º.')
        return
    await msg.answer('–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω.')
    await state.finish()

@dp.message_handler(commands=['training_today'])
async def get_training_info(msg: types.Message):
    if msg.from_user.id == ADM_ID:
        await msg.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤')
        return
    training_data = await dj.get_training_info()
    if not training_data:
        await msg.answer('–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        return
    if training_data == 'not today':
        await msg.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç')
        return
    await user_notification({'id': msg.from_user.id, 'first_not': True} ,training_data, 'today')

async def get_user_profile(msg):
    user_data = await dj.check_new_user(msg.from_user.id)
    if not user_data:
        await msg.answer('–í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å')
        return
    name = user_data.name
    phone = user_data.tel_number
    birthday = user_data.birthday.strftime('%d.%m.%Y')
    message = f'''
–§–ò–û: {name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}

–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?
'''
    change_name_button = types.InlineKeyboardButton('–§–ò–û', callback_data='change_button_name')
    change_phone_button = types.InlineKeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change_button_phone')
    change_birthday_button = types.InlineKeyboardButton('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data='change_button_birthday')
    keyboard = types.InlineKeyboardMarkup().row(change_name_button, change_phone_button).add(change_birthday_button)
    await msg.answer(message, reply_markup=keyboard)

@dp.message_handler(commands=['my_profile'])
async def get_training_info(msg: types.Message):
    if msg.from_user.id == ADM_ID:
        await msg.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤')
        return
    await get_user_profile(msg)

@dp.callback_query_handler(lambda call: call.data.startswith('change_button'))
async def change_data(call: types.CallbackQuery):
    await call.message.delete()
    data_for_change = call.data.split('_')[2]
    if data_for_change == 'name':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û')
        await CahngeProfileState.name.set()
    if data_for_change == 'phone':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89000000000(—á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥)')
        await CahngeProfileState.phone_number.set()
    if data_for_change == 'birthday':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970')
        await CahngeProfileState.birthday.set()
        

@dp.message_handler(state=CahngeProfileState.name)
async def change_name(msg: types.Message, state: FSMContext):
    await dj.change_name(msg.from_user.id, msg.text)
    await msg.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ')
    await get_user_profile(msg)
    await state.finish()

@dp.message_handler(state=CahngeProfileState.phone_number)
async def change_phone(msg: types.Message, state: FSMContext):
    if msg.text.isdigit() and len(msg.text) == 11:
        await dj.change_phone(msg.from_user.id, msg.text)
        await msg.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω')
        await get_user_profile(msg)
        await state.finish()
    else:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')

@dp.message_handler(state=CahngeProfileState.birthday)
async def change_birthday(msg: types.Message, state: FSMContext):
    regex = r"\d{2}\.\d{2}\.\d{4}"
    if not re.search(regex, msg.text):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.', reply_markup=cancel_reg_keyboard())
        return
    date_object = datetime.strptime(msg.text, "%d.%m.%Y")
    birthday = date_object.strftime("%Y-%m-%d")
    await dj.change_birthday(msg.from_user.id, birthday)
    await msg.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞')
    await get_user_profile(msg)
    await state.finish()


@dp.message_handler(is_media_group=False,
                    content_types=['text', 'audio', 'document', 'sticker', 'photo', 
                                'video', 'voice', 'contact', 'location'],
                    state=Dialogue_State.start)
async def dialog_handler(msg: types.Message):
    await send_dialogue_message(msg)


@dp.message_handler(is_media_group=True, content_types=['audio', 'document', 'photo', 'video'],
                    state=Dialogue_State.start)
async def dialog_handler_media(msg: types.Message, album: List[types.Message]):
    await send_dialogue_message_with_media(msg,album)

#–¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∫—Ä—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def split_message(message, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    return [message[i:i+max_length] for i in range(0, len(message), max_length)]

async def show_users(msg):
    users_data = await dj.get_accept_users()
    if not users_data:
        await msg.answer('–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è')
        return
    message1 = '''–£–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å:
    
'''
    message2 = '''

–ü–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å:

'''
    counter1 = 0
    counter2 = 0
    for user in users_data:
        name = user.get('name')
        birthday = user.get('birthday')
        newbie = user.get('newbie')
        if user.get('changed'):
            counter2 += 1
            message2 += f'{counter2}) {name} {birthday} {newbie}\n'
        else:
            counter1 += 1
            message1 += f'{counter1}) {name} {birthday} {newbie}\n'


    message = message1 + message2
    try:
        await msg.answer(message)
    except Exception as e:
        if str(e) == 'Message is too long':
            parts = split_message(message, max_length=4096)
            for part in parts:
                await msg.answer(part)

@dp.message_handler(is_media_group=False,
                    content_types=['text', 'audio', 'document', 'sticker', 'photo', 
                                'video', 'voice', 'contact', 'location'])
async def dialog_handler(msg: types.Message):
    if msg.from_user.id == ADM_ID:
        if msg.text == '–û—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üìä':
            message = '''
–ö–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?
'''
            select_date_button = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É', callback_data='select_date_button')
            yesterday_training_button = types.InlineKeyboardButton('–í—á–µ—Ä–∞—à–Ω—è—è', callback_data='yesterday_training_button')
            keyboard = types.InlineKeyboardMarkup().row(select_date_button, yesterday_training_button)
            await msg.answer(message, reply_markup=keyboard)
        elif msg.text == '–£–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å üèí':
            await show_users(msg)
        elif msg.text == '–†—É–ø–æ—Ä üì¢':
            await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤. (–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É)')
            await Adm_State.megaphone.set()
        else:
            await send_dialogue_message(msg)

@dp.message_handler(state=Adm_State.megaphone, content_types=['text', 'photo'])
async def save_message_to_state(msg: types.Message, state: FSMContext):
    if msg.content_type == 'text':
        await state.update_data(text=msg.text, photo=None)
    if msg.content_type == 'photo':
        await state.update_data(text=msg.caption, photo=msg.photo[-1].file_id)
    cancel_megaphone_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_megaphone_button')
    send_megaphone_button = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_megaphone_button')
    keyboard = types.InlineKeyboardMarkup().row(cancel_megaphone_button, send_megaphone_button)
    await msg.answer('''
–û—Ç–ø—Ä–∞–≤–∏—Ç—å?

–í–Ω–∏–º–∞–Ω–∏–µ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ –Ω–∞–ø–∏—Å–∞–Ω—ã—Ö.
–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
''', reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == 'cancel_megaphone_button', state=Adm_State.megaphone)
async def cancel_megaphone(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'send_megaphone_button', state=Adm_State.megaphone)
async def send_megaphone(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    users_ids = await dj.get_users_ids()
    state_data = await state.get_data()
    state_text = state_data.get('text')
    state_photo = state_data.get('photo')
    for_del = await call.message.answer('üì© –†–∞—Å—Å—ã–ª–∞—é...')
    for id in users_ids:
        try:
            if state_photo:
                await bot.send_photo(chat_id=id, photo=state_photo, caption=state_text)
            else:
                await bot.send_message(chat_id=id, text=state_text)
        except Exception as e:
            print(e)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=for_del.message_id)
    await call.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    await state.finish()

@dp.message_handler(is_media_group=True, content_types=['audio', 'document', 'photo', 'video'])
async def dialog_handler_media(msg: types.Message, album: List[types.Message]):
    if msg.from_user.id == ADM_ID:
        await send_dialogue_message_with_media(msg,album)


#–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞ –≤—á–µ—Ä—à–∞–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@dp.callback_query_handler(lambda call: call.data == 'yesterday_training_button')
async def get_yesterday_rates(call: types.CallbackQuery):
    await call.message.delete()
    rates_data = await dj.get_training_rates()
    if not rates_data:
        await call.message.answer('–í—á–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ.')
        return
    message = '–û—Ü–µ–Ω–∫–∏ –∑–∞ –≤—á–µ—Ä—à–∞–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n'
    for user in rates_data.get('users'):
        name = user.get('name')
        rate = user.get('rate')
        message += f'{name} - {rate}\n'
    average_score = rates_data.get('average_score')
    message += f'\n<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - {average_score}</b>'
    await call.message.answer(message)

#–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
@dp.callback_query_handler(lambda call: call.data == 'select_date_button')
async def get_rates_by_date(call: types.CallbackQuery):
    await call.message.delete()
    cancel_training_date_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_training_date_button')
    keyboard = types.InlineKeyboardMarkup().add(cancel_training_date_button)
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970',
                            reply_markup=keyboard)
    await Adm_State.training_date.set()

@dp.callback_query_handler(lambda call: call.data == 'cancel_training_date_button',
                        state=Adm_State.training_date)
async def cancel_training_date(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    await state.finish()


@dp.message_handler(state=Adm_State.training_date)
async def get_rates_by_date(msg: types.Message, state: FSMContext):
    regex = r"\d{2}\.\d{2}\.\d{4}"
    if not re.search(regex, msg.text):
        cancel_training_date_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_training_date_button')
        keyboard = types.InlineKeyboardMarkup().add(cancel_training_date_button)
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.', reply_markup=keyboard)
        return
    date_object = datetime.strptime(msg.text, "%d.%m.%Y")
    training_date = date_object.strftime("%Y-%m-%d")
    rates_data = await dj.get_training_rates(training_date)
    if not rates_data:
        await msg.answer('–í —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ.')
        await state.finish()
        return
    message = f'–û—Ü–µ–Ω–∫–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç {msg.text}:\n\n'
    for user in rates_data.get('users'):
        name = user.get('name')
        rate = user.get('rate')
        message += f'{name} - {rate}\n'
    average_score = rates_data.get('average_score')
    message += f'\n<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - {average_score}</b>'
    await msg.answer(message)
    await state.finish()

#–≤—Ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query_handler(lambda call: call.data == 'sign_in_button')
async def sign_in(call: types.CallbackQuery):
    await call.message.delete()
    message = '''
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
–í —Ñ–æ—Ä–º–∞—Ç–µ: 89000000000(—á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥)'''
    await call.message.answer(message)
    await StartState.phone_number_sign_in.set()

#–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=StartState.phone_number_sign_in)
async def get_tel_number(msg: types.Message, state: FSMContext):
    if msg.text.isdigit() and len(msg.text) == 11:
        user_name = await dj.identification_by_tel_number(msg.from_user.id, msg.text)
        if not user_name:
            main_menu_button = types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_button')
            keyboard = types.InlineKeyboardMarkup().add(main_menu_button)
            await msg.answer('''üö´ <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–í–æ–∑–º–æ–∂–Ω–æ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>

–í—ã –º–æ–∂–µ—Ç–µ:
- –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É (–∫–æ–º–∞–Ω–¥–∞ /dialogue).
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–≤–æ–¥
- –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é''', reply_markup=keyboard)
            
            return
        await msg.answer(f'{user_name}, —Ä–∞–¥—ã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è —É–≤–µ–¥–æ–º–ª—é –í–∞—Å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!')
        await state.finish()
        return
    await msg.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
    return

#–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–æ–π—Ç–∏
@dp.callback_query_handler(lambda call: call.data == 'main_menu_button', state=StartState.phone_number_sign_in)
async def back_to_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await main_menu_message(call.message)
    await state.finish()

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def cancel_reg_keyboard():
    cancel_reg_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_reg_button')
    keyboard = types.InlineKeyboardMarkup().add(cancel_reg_button)
    return keyboard

#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query_handler(lambda call: call.data == 'sign_up_button')
async def sign_up(call: types.CallbackQuery):
    await call.message.delete()
    message = '''
–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–∏ –§–ò–û.'''

    await call.message.answer(message, reply_markup=cancel_reg_keyboard())
    await StartState.name.set()

#–æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–º–µ–Ω–∏
@dp.callback_query_handler(lambda call: call.data == 'cancel_reg_button', state=StartState.name)
async def cancel_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await main_menu_message(call.message)

#–∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –≤ State
@dp.message_handler(state=StartState.name)
async def get_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer('''–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
–í —Ñ–æ—Ä–º–∞—Ç–µ: 89000000000(—á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥)''', 
                    reply_markup=cancel_reg_keyboard())
    await StartState.phone_number_sign_up.set()

#–æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.callback_query_handler(lambda call: call.data == 'cancel_reg_button', state=StartState.phone_number_sign_up)
async def cancel_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await main_menu_message(call.message)

#–∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ State
@dp.message_handler(state=StartState.phone_number_sign_up)
async def get_tel_number(msg: types.Message, state: FSMContext):
    if msg.text.isdigit() and len(msg.text) == 11:
        await state.update_data(phone_number_sign_up=msg.text)
        await msg.answer('''–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–æ–≥–¥–∞ —É –í–∞—Å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?
–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970''', reply_markup=cancel_reg_keyboard())
        await StartState.birthday.set()
    else:
        await msg.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
                        reply_markup=cancel_reg_keyboard())

#–æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.callback_query_handler(state=StartState.birthday)
async def cancel_birthday(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await main_menu_message(call.message)

#–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥ —Å –≥–∞–ª–æ—á–∫–æ–π "–Ω–æ–≤–∏—á–æ–∫"
@dp.message_handler(state=StartState.birthday)
async def get_birthday(msg: types.Message, state: FSMContext):
    regex = r"\d{2}\.\d{2}\.\d{4}"
    if not re.search(regex, msg.text):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.', reply_markup=cancel_reg_keyboard())
        return
    state_data = await state.get_data()
    name = state_data.get('name')
    phone_number = state_data.get('phone_number_sign_up')
    date_object = datetime.strptime(msg.text, "%d.%m.%Y")
    birthday = date_object.strftime("%Y-%m-%d")
    user_id = msg.from_user.id
    await dj.add_new_user(name, phone_number, birthday, user_id)
    await msg.answer(f'''
–§–ò–û: {name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {msg.text}

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_profile
–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è —Å–æ–æ–±—â—É –í–∞–º –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –í–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ.''')
    await state.finish()

#–∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ
@dp.callback_query_handler(lambda call: call.data == 'accept_button')
async def first_accept(call: types.CallbackQuery):
    today = datetime.today().date()
    training_data_first = await dj.get_training_data_for_accept(today, call.from_user.id)

    now = datetime.now()
    # —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª time.txt –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    # –≤ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00:00
    # time_str = ''
    # with open('Bot/time.txt', 'r') as file:
    #     # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ–∞–π–ª–∞now
    #     time_str = file.readline().strip()
    # current_time = datetime.strptime(time_str, '%H:%M:%S').time()
    current_time = datetime.strptime(now.strftime("%H:%M:%S"), '%H:%M:%S').time()
    if today >= training_data_first.get('date') and current_time >= training_data_first.get('time'):
        await call.message.delete()
        await call.message.answer('–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –æ–∫–æ–Ω—á–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É.')
        return
    await call.message.delete()
    training_data_second = await dj.accept_training(today, call.from_user.id)
    training_time = training_data_first.get('time').strftime("%H:%M")
    training_place = training_data_second.get('place')
    training_address = training_data_second.get('address')
    
    url = training_data_second.get('route')
    message = f'''
<b>–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ</b>

–ñ–¥—ë–º –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤ {training_time}.
–ê–¥—Ä–µ—Å: {training_place}, {training_address}

<a href="{url}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>'''
    await call.message.answer(message, disable_web_page_preview=True)

@dp.callback_query_handler(lambda call: call.data == 'declain_button')
async def declain(call: types.CallbackQuery):
    date_str = call.message.text.split('\n\n')[1].split('\n')[0].split(' ')
    if len(date_str) == 2:
        date_str = date_str[1]
    if len(date_str) == 3:
        date_str = date_str[2]
    date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    date = date_obj.strftime("%Y-%m-%d")
    today = datetime.today().date()
    await dj.declain_training(date, call.from_user.id)
    await call.message.delete()
    await call.message.answer('‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ñ–¥—ë–º –í–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')


#–æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.callback_query_handler(lambda call: call.data and call.data.startswith('rate_button'))
async def get_rate(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = call.data.split('_')
    rate = data[2]
    training_id = data[3]
    await dj.set_rate(rate, training_id)
    await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')




#–∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É
@dp.callback_query_handler(lambda call: call.data.startswith('accept_game_button'))
async def first_accept(call: types.CallbackQuery):
    await call.message.delete()
    game_id = call.data.split('_')[3]
    game_data = await dj.get_game_data_for_accept(game_id, call.from_user.id)

    now = datetime.now().replace(microsecond=0)
    game_datetime = game_data.get('datetime')
    if now >= game_datetime:
        await call.message.delete()
        await call.message.answer('–ó–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É –æ–∫–æ–Ω—á–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É.')
        return
    
    await dj.accept_game(game_id, call.from_user.id)
    
    url = game_data.get('route')
    address = game_data.get('address')
    place = game_data.get('place')
    game_datetime = game_datetime.strftime("%d.%m.%Y %H:%M")
    message = f'''
<b>–ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ</b>

<b>{game_datetime}</b> - –∂–¥—ë–º –í–∞—Å –Ω–∞ –∏–≥—Ä—É.
–ê–¥—Ä–µ—Å: {place}, {address}

<a href="{url}">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>'''
    await call.message.answer(message, disable_web_page_preview=True)


@dp.callback_query_handler(lambda call: call.data.startswith('declain_game_button'))
async def declain(call: types.CallbackQuery):
    game_id = call.data.split('_')[3]
    await dj.declain_game(game_id, call.from_user.id)
    await call.message.delete()
    await call.message.answer('‚ùå –ò–≥—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ñ–¥—ë–º –í–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')